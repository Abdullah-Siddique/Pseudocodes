Before starting, let's define what Dijkstra's Algorithm is.
Actually Dijkstraâ€™s algorithm finds the shortest path from the starting node to all other nodes in a weighted graph. Let's go to pseudocode.
Pseudocode:
Dijkstra(graph, start):
    set distance of start to 0
    set distance of all other nodes to infinity
    add all nodes to the unvisited set
    while unvisited set is not empty:
        current = node with smallest distance
        remove current from unvisited set
        for each neighbor of current:
            distance = current distance + distance to neighbor
            if distance < neighbor's distance:
                update neighbor's distance

Seems harder? Let's visulize:
      7
  A-------B
  |     / | \
 2|   /   |  \
  |  /3   |4  \
  | /     |    \
  C ----- D ---- E
      8       1

Nodes: A, B, C, D, E

Edges with Weights:
A to B: 7
A to C: 2
B to C: 3
B to D: 4
C to D: 8
D to E: 1
B to E: Not given
Visualization Details:

Node A connects to B with a weight of 7 and to C with a weight of 2.

Node B connects to C with a weight of 3, to D with a weight of 4, to E with no weight and indirectly connects to E through D.

Node C connects to D with a weight of 8.

Node D connects to E with a weight of 1.
